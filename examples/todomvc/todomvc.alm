module todo
sorts
    todo_state :: { complete, incomplete }
    filters :: { all, active, completed }
    todos :: integers
    new_todo :: actions
        attributes
            text : string
    todo_action :: actions
        attributes
            target : todos
    toggle_todo :: todo_action
    destroy_todo :: todo_action
    edit_todo :: todo_action
        attributes
            text : string
    set_all :: actions
        attributes
            state: todo_state
    clear_completed :: actions
    set_active_filter :: actions
        attributes
            filter : filters
fluents
    basic 
        next_todo : todos
        
        destroyed : todos -> booleans
        
        text : todos -> strings

        active : todos -> booleans
        completed : todos -> booleans

        active_filter : filters
    defined
        visible : todos -> booleans
axioms
    occurs(X) causes
        text(Todo) = Text,
        completed(Todo) = false,
        next_todo = Todo + 1
    if
        instance(X, new_todo),
        text(X) = Text,
        next_todo = Todo.

    occurs(X) causes
        completed(Todo) = Completed,
    if
        instance(X, toggle_all),
        should_toggle_all_completed = Completed.

     occurs(X) causes completed(Todo) = !Completed if
        instance(X, toggle_todo),
        target(X) = Todo,
        completed(Todo) = Completed.
    
    occurs(X) causes text(Todo) = Text if
        instance(X, edit_todo),
        target(X) = Todo,
        input = Text.
    
    occurs(X) causes destroyed(Todo) if
        instance(X, clear_completed),
        completed(Todo).

    occurs(A) causes active_filter = F if
        instance(A, set_active_filter),
        filter(A) = F.

    visible(Todo) if active_filter = all.
    visible(Todo) if completed(Todo), active_filter = completed.
    visible(Todo) if -completed(Todo), active_filter = active.

    // false if visible(Todo), destroyed(Todo).

initially
    next_todo = 1.
    active_filter = all.
